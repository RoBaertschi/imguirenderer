plugins {
	id 'eclipse'
	id 'maven-publish'
	id 'net.neoforged.gradle' version '[6.0.18,6.2)'
	id 'org.spongepowered.mixin' version '0.7.+'
}

version = mod_version
group = mod_group_id

base {
	archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
jarJar.enable()
jarJar {}


repositories {
	mavenCentral()
	maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
}

minecraft {
	mappings channel: mapping_channel, version: mapping_version
	copyIdeResources = true
	runs {
		configureEach {
			workingDirectory project.file('run')
			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'
			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

		client {
			property 'forge.enabledGameTestNamespaces', mod_id
		}
		server {
			property 'forge.enabledGameTestNamespaces', mod_id
		}
		gameTestServer {
			property 'forge.enabledGameTestNamespaces', mod_id
		}

		data {
			workingDirectory project.file('run-data')
			args '--mod', mod_id, '--all', '--output', file('src/generated/resources'), '--existing', file('src/main/resources')
		}

	}
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
	minecraft "net.neoforged:forge:${minecraft_version}-${neo_version}"
	annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
	
	['binding', 'lwjgl3', 'natives-linux', 'natives-windows'].each {
		minecraftLibrary (group: "io.github.spair", name: "imgui-java-$it", version: imguiVersion) {
			exclude group: "org.lwjgl"
		}
		jarJar(group: "io.github.spair", name: "imgui-java-${it}", version: "[0,)") {
			transitive(false)
			exclude group: "org.lwjgl"
		}
	}
}

tasks.withType(ProcessResources).configureEach {
	var replaceProperties = [
	        minecraft_version	: minecraft_version, 		minecraft_version_range: minecraft_version_range,
			neo_version			: neo_version,				neo_version_range: neo_version_range,
			loader_version_range: loader_version_range,
			mod_id				: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
			mod_authors			: mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
	]
	inputs.properties replaceProperties

	filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
		expand replaceProperties + [project: project]
	}
}

mixin {
	config 'imguirenderer.mixin.json'
}

jar {
	manifest {
		attributes([
				"Specification-Title"     : mod_id,
				"Specification-Vendor"    : mod_authors,
				"Specification-Version"   : "1",
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : project.jar.archiveVersion,
				"Implementation-Vendor"   : mod_authors,
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				"MixinConfigs"			  : "forge-mixin.json"
		])
	}
	finalizedBy 'reobfJar'
}

publishing {
	publications {
		gpr(MavenPublication) {
			from(components.java)
		}
	}
	repositories {
		maven {
			name = "GitHubPackages"
			url = uri("https://maven.pkg.github.com/RoBaertschi/imguirenderer")
			credentials {
				username = System.getenv("GITHUB_ACTOR")
				password = System.getenv("GITHUB_TOKEN")
			}
		}

	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}
